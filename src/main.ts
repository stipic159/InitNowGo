import { Bot, Context, session } from "grammy";
import mongoose from "mongoose";
import path from "path";
import { config } from "./config/env.config";
import BotUpdate from "./updates/BotUpdates";
import { Logger } from "./utils/Logger.utils";

export interface SessionData {
  waitingForOrientation?: boolean;
  errorMessageIdsOrientation?: number[];
  pendingOrientation?: {
    userId: number;
    callbackMessageId?: number;
  };
}

export interface SessionContext extends Context {
  session: SessionData;
}

const bot = new Bot<SessionContext>(config.get("BOT").TOKEN, {
  client: {
    apiRoot: "https://api.telegram.org",
  },
});

async function bootstrap() {
  try {
    await mongoose.connect(config.get("BOT").MONGO_URI);
    Logger.success("MongoDB —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
    await BotUpdate.loadModules(path.join(__dirname, "updates"));
    Logger.info("–ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");

    await BotUpdate.register(bot);

    await bot.start({
      drop_pending_updates: true,
      allowed_updates: [],
      onStart: (info) => {
        Logger.info(`üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @${info.username}`);
        Logger.info(`‚è±Ô∏è –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString("ru-RU")}`);
      },
    });

    process.once("SIGINT", () => {
      bot.stop();
      process.exit(0);
    });
    process.once("SIGTERM", () => {
      bot.stop();
      process.exit(0);
    });
  } catch (error) {
    Logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    process.exit(1);
  }
}

bot.use((ctx, next) => {
  if (
    config.get("BOT").DEV_MODE &&
    !(ctx?.from?.id === config.get("BOT").ID_DEVELOPER)
  ) {
    ctx.react("‚ö°");
  } else {
    return next();
  }
});

bot.use(
  session({
    initial: () => ({}),
  })
);

bot.use(async (ctx: Context) => {
  await BotUpdate.run(bot, ctx);
});

bot.catch((err) => {
  Logger.error("Middleware error:", err);
});

bootstrap().catch((error) => {
  Logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:", error);
  process.exit(1);
});
