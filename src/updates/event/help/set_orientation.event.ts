import { Bot } from "grammy";
import { config } from "../../../config/env.config";
import { SessionContext } from "../../../main";
import BotUpdate from "../../BotUpdates";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Å–∏–º–≤–æ–ª–æ–≤
function escapeHtml(unsafe: string): string {
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

export class OrientationEvent extends BotUpdate {
  constructor() {
    super({
      on: true,
      desc: "–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏",
      category: ["üè† –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"],
    });
  }

  async execute(
    bot: Bot<SessionContext>,
    ctx: SessionContext,
    { Logger, sck1 }: any
  ): Promise<void> {
    if (!ctx.message || !("text" in ctx.message)) return;

    const session = ctx.session;
    if (!session?.waitingForOrientation || !session.pendingOrientation) return;

    const { userId, callbackMessageId } = session.pendingOrientation;
    if (userId !== ctx.from?.id) return;
    if (!ctx?.chat?.id) return;

    session.errorMessageIdsOrientation ??= [];

    const orientationText = ctx?.message?.text?.trim();
    const isValidText =
      orientationText &&
      orientationText.length <= 17 &&
      /^[\p{L}\p{M}\w\s\p{Emoji}\d]+$/u.test(orientationText);

    if (!isValidText) {
      const errorMsg = await ctx.reply(
        `<b>üõ°Ô∏è –ü–æ–º–æ—â—å</b>\n\n–ù–µ –±–æ–ª—å—à–µ 17 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ —Å—Å—ã–ª–æ–∫, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.`,
        { parse_mode: "HTML" }
      );
      session.errorMessageIdsOrientation.push(
        errorMsg.message_id,
        ctx.message.message_id
      );
      return;
    }

    await this.cleanupMessages(bot, ctx, session, callbackMessageId);

    try {
      const user = await sck1.findOne({ id: userId });
      const escapedOrientation = escapeHtml(orientationText);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!user) {
        const loadingSteps = [
          "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
          "üìÇ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
          "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...",
          "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        ];

        const { message_id: loadingMsgId } = await ctx.reply(loadingSteps[0]);

        for (let i = 1; i < loadingSteps.length; i++) {
          await new Promise((resolve) => setTimeout(resolve, 2500));
          await bot.api.editMessageText(
            ctx.chat.id,
            loadingMsgId,
            loadingSteps[i]
          );
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–Ω—É—Å–∞–º–∏
        const currentDate = new Date();
        const endDate = new Date();
        endDate.setDate(currentDate.getDate() + 14);
        const supportUsername = (
          await bot.api.getChat(config.get("BOT").SUPPORT_ID)
        ).username;

        await sck1.create({
          id: userId,
          name: ctx.from.first_name || "Unknown",
          orientation: orientationText,
          username: ctx.from.username ?? "-",
          msg: 25000,
          donate: {
            subscriptions: [
              {
                type: "VIP",
                endDate: endDate,
              },
            ],
          },
        });

        // HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        const welcomeMessage =
          `<b>üåü –ü—Ä–∏–≤–µ—Ç, –Ω–æ–≤–æ–±—Ä–∞–Ω–µ—Ü! üåü</b>\n\n` +
          `–¢–≤–æ—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è ‚Üí <i>${escapedOrientation}</i> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. üéâ\n` +
          "–ò —É –Ω–∞—Å –¥–ª—è —Ç–µ–±—è <b>–ø–æ–¥–∞—Ä–æ–∫</b> –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n" +
          "üéÅ <b>VIP-—Å—Ç–∞—Ç—É—Å –Ω–∞ 14 –¥–Ω–µ–π</b>\n" +
          "üí∞ <b>25,000 –º—Å–≥</b> —É–∂–µ –Ω–∞ —Ç–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n" +
          "<i>–†–∞—Å—Ö–æ–¥—É–π –∏—Ö —Å —É–º–æ–º!</i> ‚úÖ\n\n" +
          "–ü–æ–¥–∞—Ä–∫–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n" +
          "üéÅ /rank\n\n" +
          `<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:</b> /help\n` +
          `üôã‚Äç‚ôÇÔ∏è <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> <a href="https://t.me/${supportUsername}">@${supportUsername}</a>\n` +
          "‚öñÔ∏è <b>–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã:</b> ING (2025)";

        await bot.api.editMessageText(
          ctx.chat.id,
          loadingMsgId,
          welcomeMessage,
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                    callback_data: `start_data:${ctx.from.id}`,
                  },
                ],
              ],
            },
          }
        );

        Logger.success(`–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å –±–æ–Ω—É—Å–∞–º–∏! ID: ${userId}`);
      } else {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await sck1.updateOne(
          { id: userId },
          { $set: { orientation: orientationText } }
        );

        await ctx.reply(
          `–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ <i>${escapedOrientation}</i>!`,
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                    callback_data: `start_data:${ctx.from.id}`,
                  },
                ],
              ],
            },
          }
        );
      }
    } catch (e) {
      console.error(e);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.");
    } finally {
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
      session.waitingForOrientation = false;
      delete session.pendingOrientation;
      session.errorMessageIdsOrientation = [];
    }
  }

  private async cleanupMessages(
    bot: any,
    ctx: SessionContext,
    session: any,
    callbackMessageId?: number
  ) {
    const deletePromises: Promise<void>[] = [];

    session.errorMessageIdsOrientation.forEach((msgId: number) => {
      deletePromises.push(
        bot.api.deleteMessage(ctx.chat?.id, msgId).catch(() => {})
      );
    });

    if (callbackMessageId) {
      deletePromises.push(
        bot.api.deleteMessage(ctx.chat?.id, callbackMessageId).catch(() => {})
      );
    }

    await Promise.all(deletePromises);
    session.errorMessageIdsOrientation = [];
  }
}
