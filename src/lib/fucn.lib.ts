import { Bot, Context } from "grammy";
import BotUpdate, { MESSAGE_TYPES, ModuleParams } from "../updates/BotUpdates";
import { sck1 } from "./database";

function getMessageType(message: any): string | null {
  for (const type of MESSAGE_TYPES) {
    if (message[type] !== undefined) {
      return type;
    }
  }
  return null;
}

export function isGroup(ctx?: Context): boolean {
  return ctx?.chat?.type === "supergroup" || ctx?.chat?.type === "group";
}

export async function updateUserData(ctx: Context, commandPlugin?: ModuleParams): Promise<void> {
  const userId = ctx.from?.id;
  if (!userId) return;

  const user = await sck1.findOne({ id: userId });
  if (!user) return;

  if (ctx.message) {
    if (commandPlugin) {
      await updateCommandUsage(userId, commandPlugin);
    } else {
      await updateMessageStats(userId, user, ctx);
    }
  }
}

async function updateCommandUsage(userId: number, commandPlugin: ModuleParams): Promise<void> {
  const now = new Date();
  const currentMonthYear = `${now.getFullYear()}.${String(now.getMonth() + 1).padStart(2, "0")}`;
  const commandName = commandPlugin.pattern || "-";

  const user = await sck1.findOne({ id: userId });
  if (!user) return;

  const updateQuery = user.frequentlyUsedCommands.some((cmd) => cmd.cmdName === commandName)
    ? {
        $inc: { "frequentlyUsedCommands.$[elem].cmdUsageCount": 1 },
        $set: { "frequentlyUsedCommands.$[elem].lastUsageMonth": currentMonthYear },
      }
    : {
        $push: {
          frequentlyUsedCommands: {
            cmdName: commandName,
            cmdUsageCount: 1,
            lastUsageMonth: currentMonthYear,
          },
        },
      };

  await sck1.updateOne(
    { id: userId },
    updateQuery,
    commandName ? { arrayFilters: [{ "elem.cmdName": commandName }] } : undefined
  );
}

async function updateMessageStats(userId: number, user: any, ctx: Context): Promise<void> {
  if (!ctx.message) return;

  await sck1.updateOne(
    { id: userId },
    {
      $set: {
        msg: user.msg + 1,
        lastSendMsg: new Date(),
        allTimeMessages: user.allTimeMessages + 1,
      },
    }
  );
}

export async function start(bot: Bot, ctx: Context, isAction: boolean, { text, args, Logger }: any): Promise<void> {
  if (!ctx?.from?.id) return;

  try {
    const userId = ctx.from.id;
    const user = await sck1.findOne({ id: userId });
    const replyParameters = isAction || !ctx.msg ? undefined : { message_id: ctx.msg.message_id };

    if (!user) {
      await sendWelcomeMessage(ctx, userId, replyParameters, Logger);
    } else {
      await sendWelcomeBackMessage(ctx, user, replyParameters, Logger);
    }
  } catch (error) {
    Logger.error(`Start command error: ${error}`);
  }
}

async function sendWelcomeMessage(ctx: Context, userId: number, replyParameters: any, Logger: any): Promise<void> {
  const markup = {
    inline_keyboard: [
      [
        {
          text: "ü§î –í–≤–æ–¥",
          callback_data: `set_orientation:${userId}`,
        },
      ],
    ],
  };

  try {
    await ctx.reply(
      `<b>ü•≥ –ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}</b>! <i>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—Å (–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é)</i>!`,
      {
        parse_mode: "HTML",
        reply_parameters: replyParameters,
        reply_markup: markup,
      }
    );
  } catch (error) {
    Logger.warn(`Welcome message error: ${error}`);
  }
}

async function sendWelcomeBackMessage(ctx: Context, user: any, replyParameters: any, Logger: any): Promise<void> {
  const markup = {
    inline_keyboard: [
      [
        { text: "üè´ –ü–æ–º–æ—â—å", callback_data: `help_data:${user.id}` },
        { text: "üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url: "https://t.me/initnowgo_helper" },
      ],
    ],
  };

  try {
    await ctx.reply(`<b>üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${ctx.from?.first_name}!</b>\n\n<i>üëá–ü–æ–º–æ—â—å/–ü–æ–¥–¥–µ—Ä–∂–∫–∞üëá</i>`, {
      parse_mode: "HTML",
      reply_parameters: replyParameters,
      reply_markup: markup,
    });
  } catch (error) {
    Logger.warn(`Welcome back error: ${error}`);
  }
}

export async function help(bot: Bot, ctx: Context, isAction: boolean, { text, args, Logger }: ExecuteParams): Promise<void> {
  if (!ctx.msg) return;
  const name = ctx.from?.first_name || ctx.from?.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  const categories = Array.from(BotUpdate.categoryIdMap.keys());
  const replyParameters = isAction || !ctx.msg ? undefined : { message_id: ctx.msg.message_id };

  if (text) {
    const commandName = text.trim().toLowerCase();
    const commandModule = BotUpdate.getAll().find(
      (module) =>
        module.moduleType === "command" &&
        ((typeof module.pattern === "string" && module.pattern.toLowerCase() === commandName) ||
          (Array.isArray(module.pattern) && module.pattern.some((p) => p.toLowerCase() === commandName)) ||
          (module.aliases && module.aliases.some((a) => a.toLowerCase() === commandName)))
    );

    if (commandModule) {
      let detailText = `<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ</b>\n\n`;

      detailText += `<b>üîñ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>${commandModule.pattern}</code>\n`;

      if (commandModule.aliases && commandModule.aliases.length > 0) {
        detailText += `<b>üìé –ê–ª–∏–∞—Å—ã:</b> ${commandModule.aliases.map((a) => `<code>${a}</code>`).join(", ")}\n`;
      }

      detailText += `\n<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${commandModule.desc}\n`;
      detailText += `\n<b>üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n${commandModule.category.join(", ")}\n`;

      detailText += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

      detailText += `<b>üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:</b>\n`;
      detailText += `‚Ä¢ –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: ${commandModule.isCreator ? "‚úÖ" : "‚ùå"}\n`;
      detailText += `‚Ä¢ –ê–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã: ${commandModule.isAdminGroup ? "‚úÖ" : "‚ùå"}\n`;
      detailText += `‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã: ${commandModule.isCreatorGroup ? "‚úÖ" : "‚ùå"}\n`;
      detailText += `‚Ä¢ –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${commandModule.level}\n`;

      if (commandModule.priceMsg || commandModule.priceLvl) {
        detailText += `\n<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n`;
        if (commandModule.priceMsg) detailText += `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ${commandModule.priceMsg}\n`;
        if (commandModule.priceLvl) detailText += `‚Ä¢ –£—Ä–æ–≤–Ω–∏: ${commandModule.priceLvl}\n`;
      }

      detailText += `\n<b>‚öñÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n`;
      detailText += `‚Ä¢ –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã: ${commandModule.isGroupOnly ? "‚úÖ" : "‚ùå"}\n`;
      detailText += `‚Ä¢ –¢–æ–ª—å–∫–æ –õ–°: ${commandModule.isPrivateOnly ? "‚úÖ" : "‚ùå"}\n`;
      detailText += `‚Ä¢ –¢—Ä–µ–±—É–µ—Ç —Ç–µ–≥–∞: ${commandModule.isTagRequired ? "‚úÖ" : "‚ùå"}\n`;
      detailText += `‚Ä¢ NSFW: ${commandModule.nsfw ? "üîû" : "‚ùå"}\n`;

      if (commandModule.cooldownTime) {
        detailText += `\n<b>‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω:</b> ${commandModule.cooldownTime / 1000} —Å–µ–∫.\n`;
      }

      await ctx.reply(detailText, {
        parse_mode: "HTML",
        reply_parameters: replyParameters,
      });
      return;
    }
  }

  const buttons = categories.map((category) => [
    {
      text: category,
      callback_data: `help_category:${BotUpdate.categoryIdMap.get(category)}:${ctx.msg?.message_id}:${ctx.from?.id}`,
    },
  ]);

  let message = `–ü—Ä–∏–≤–µ—Ç, ${name}! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã:`;
  if (text) {
    message = `üö´ –ö–æ–º–∞–Ω–¥–∞ "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n` + message;
  }

  await ctx.reply(message, {
    reply_markup: { inline_keyboard: buttons },
    reply_parameters: replyParameters,
  });
}

export interface ExecuteParams {
  text?: string;
  args?: string[];
  Logger?: any;
  sck1?: any;
  callbackData?: string;
}
